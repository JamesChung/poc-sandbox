/*
 * Matter replacement sample PoC API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	// "github.com/gorilla/mux"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service      DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"ConfigsDelete",
			strings.ToUpper("Delete"),
			"/v1/configs",
			c.ConfigsDelete,
		},
		{
			"ConfigsGet",
			strings.ToUpper("Get"),
			"/v1/configs",
			c.ConfigsGet,
		},
		{
			"ExclusionsDelete",
			strings.ToUpper("Delete"),
			"/v1/exclusions",
			c.ExclusionsDelete,
		},
		{
			"ExclusionsPost",
			strings.ToUpper("Post"),
			"/v1/exclusions",
			c.ExclusionsPost,
		},
		{
			"InfoGet",
			strings.ToUpper("Get"),
			"/v1/info",
			c.InfoGet,
		},
		{
			"PoliciesGet",
			strings.ToUpper("Get"),
			"/v1/policies",
			c.PoliciesGet,
		},
		{
			"PoliciesPost",
			strings.ToUpper("Post"),
			"/v1/policies",
			c.PoliciesPost,
		},
	}
}

// ConfigsDelete - Delete configurations
func (c *DefaultApiController) ConfigsDelete(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	policyParam := query.Get("policy")
	clientIdParam := query.Get("clientId")
	policyVersionParam := query.Get("policyVersion")
	result, err := c.service.ConfigsDelete(r.Context(), policyParam, clientIdParam, policyVersionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ConfigsGet - Get configurations
func (c *DefaultApiController) ConfigsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	clientIdParam := query.Get("clientId")
	policyParam := query.Get("policy")
	policyVersionParam := query.Get("policyVersion")
	result, err := c.service.ConfigsGet(r.Context(), clientIdParam, policyParam, policyVersionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ExclusionsDelete - Delete exclusions
func (c *DefaultApiController) ExclusionsDelete(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	policyParam := query.Get("policy")
	clientIdParam := query.Get("clientId")
	result, err := c.service.ExclusionsDelete(r.Context(), policyParam, clientIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ExclusionsPost - Get exclusions
func (c *DefaultApiController) ExclusionsPost(w http.ResponseWriter, r *http.Request) {
	exclusionsPostRequestParam := ExclusionsPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&exclusionsPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertExclusionsPostRequestRequired(exclusionsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ExclusionsPost(r.Context(), exclusionsPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// InfoGet - Get info
func (c *DefaultApiController) InfoGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.InfoGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PoliciesGet - Get policies
func (c *DefaultApiController) PoliciesGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	clientIdParam := query.Get("clientId")
	continuationTokenParam := query.Get("continuationToken")
	result, err := c.service.PoliciesGet(r.Context(), clientIdParam, continuationTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PoliciesPost - Add a policy
func (c *DefaultApiController) PoliciesPost(w http.ResponseWriter, r *http.Request) {
	policiesPostRequestParam := PoliciesPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&policiesPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPoliciesPostRequestRequired(policiesPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PoliciesPost(r.Context(), policiesPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
